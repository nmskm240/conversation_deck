@startuml Conversation deck cards
package Controllers
{
    class TopicForm
}

package Database
{
    package Models
    {
        abstract DatabaseItem
        {
            -_id:int
            +name:String
            +detail:String
            +<<property>>id:int{get only}
            +parse(data:Map<String, dynamic>):DatabaseItem
            +toMap():Map<String, dyanmic>
            +{abstract}init(obj:Map<String,dynamic>):Future
        }
    }
    package Utils
    {
        class Builder
        {
            -_constructor:Map<Type,dynamic Function(Map<String,dynamic>)>
            -{static}_instance:Builder
            -_constructor:Builder()
            +make<T>(arguments:Map<String,dynamic>):T?
        }
    }
    abstract DatabaseProvider<T extends DatabaseItem>
    {
        +version:int
        +table:String
        -_database:Database?
        +<<property>>database:Future<Database?>{get only}
        -<<async>>_init():Future<Database>
        +<<async>>all():Future<List<T?>>
        +<<async>>reset():Future
        +{abstract}<<async>>onCreate(db:Database,version:int):Future
        +<<async>>insert(data:T):Future<int?>
        +<<async>>update(data:T):Future<int?>
        +<<async>>deleteAt(id:int):Future<int?>
        +<<async>>getAt(id:int):Future<T?>
        +<<async>>getAts(ids:Iterable<int>):Future<List<T?>>
    }
    class DeckDatabase
    {
        -_instance:DeckDatabase
        -_constructor():DeckDatabase
    }
    class TopicDatabase
    {
        -_instance:TopicDatabase
        -_constructor():TopicDatabase
    }
}

package "Models "
{
    class DatabaseListTile<T extends DatabaseItem>
    {
        +data:T?
        +onTap:void Function(T?)
        +onLongPress:void Function(T?)
    }
    class Deck
    {
        -_topics:List<Topic>
        +{static}separator:String
        +<<property>>topics:Iterable<Topic>
        +draw(count:int):List<Topic>
        +shuffle():void
    }
    class FooterItem
    {
        +route:Widget
    }
    class Topic
    {
        +when:DateTime
        +where:String
        +who:String
        +whatUp:String
        -_useCount:int
        +<<property>>useCount:int{get only}
        +use():void
    }
}
package Pages
{
    package States
    {
        abstract TopicListState
        {
            +appBar:AppBar
            +future:Future<List<Topic?>>
            +{abstract}onFloatingButtonPressed():void
            +{abstract}onListTileTap():void
            +{abstract}onListTileLongPress():void
            +{abstract}update():void
        }
        class TopicAll
        class DecksTopic
        {
            +deck:Deck
        }
    }
    class DeckMake
    class Home
    class Root
    class TopicList
    class TopicMake
}
package Views
{
    class DatabaseListView
    {
        +future:Future<List<T?>>
        +onTap:void Function(T?)
        +onLongPress:void Function(T?)
    }
    class Footer
    {
        +items:List<FooterItem>
        +onTap:Function(int)
    }
    class LabeledDropdown
    {
        +label:String
        +value:T
        +onChanged:Function
        +items:List<DropdownMenuItem<T>>?
    }
    class LabeledTextField
    {
        +text:String
        +label:String
        +hing:String
        +onChanged:Function
        +type:TextInputType
    }
}

DatabaseProvider --> DatabaseItem
DatabaseProvider --> Builder : use
Deck --> TopicDatabase : use
Root --> Footer
Home --> DatabaseListView
TopicList --> DatabaseListView
TopicMake --> TopicForm
TopicForm --> Topic : create
Builder -left-> DatabaseItem : create
TopicList --> TopicListState : use

DeckDatabase --|> DatabaseProvider
TopicDatabase --|> DatabaseProvider
Deck --|> DatabaseItem
Topic --|> DatabaseItem
TopicAll --|> TopicListState
DecksTopic --|> TopicListState

DeckDatabase *-up- Deck
TopicDatabase *-up- Topic
TopicForm "1" *-- "*" LabeledDropdown
TopicForm "1" *-- "*" LabeledTextField
Footer "1" *-- "*" FooterItem
DatabaseListTile "1" *-- "1" DatabaseItem

Deck "1" o-right- "*" Topic
DatabaseListView "1" o-- "*" DatabaseListTile

@enduml