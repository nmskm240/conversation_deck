@startuml Conversation deck cards
package Database
{
    abstract DatabaseItem
    {
        -_id:int
        -_name:String
        -_detail:String
        +<<property>>id:int{get only}
        +<<property>>name:String{get only}
        +<<property>>detail:String{get only}
        +deserialize(data:Map<String, dynamic>):DatabaseItem
        +serialize():Map<String, dyanmic>
    }
    abstract DatabaseProvider<T extends DatabaseItem>
    {
        -_name:String
        +version:int
        +table:String
        -_database:Database?
        +<<property>>database:Future<Database?>{get only}
        -<<async>>_init():Future<Database>
        +<<async>>all():Future<List<Map<String,dynamic>>?>
        +<<async>>restore():Future
        +<<async>>onCreate(db:Database,version:int):Future
        +<<async>>insert(data:T):Future<int?>
        +<<async>>update(data:T):Future<int?>
        +<<async>>deleteAt(id:int):Future<int?>
        +<<async>>getAt(id:int):Futur<int?>
    }
}
class Deck
{
    -_name:String
    -_topics:List<Topic>
    +<<property>>name:String
    +<<property>>topics:Iterable<Topic>
    +draw(count:int):List<Topic>
    +shuffle():void
}
class Topic
{
    -_useCount:int
    -_info:TopicInfo
    -_affiliations:List<String>
    -_timestamp:DateTime
    +<<property>>useCount:int{get only}
    +<<property>>info:TopicInfo{get only}
    +<<property>>affiliations:Iterable<String>{get only}
    +<<property>>timestamp:DateTime{get only}
    +use():void
}
class TopicInfo
{
    +when:Time
    +where:String
    +who:String
    +what:String
    +why:String
    +how:String
    +whatUp:String
    +specifically:String
    +fromJson(json:Map<String, dynamic>):TopicInfo
    +toJson():Map<String, dyanmic>
}
class TopicDatabase
{
    -_instance:TopicDatabase
    -_constructor():TopicDatabase
}
class Time
class TimeDatabase
{
    -_instance:TimeDatabase
    -_constructor():TimeDatabase
}

DatabaseProvider --> DatabaseItem
TopicDatabase --> Topic
TimeDatabase --> Time
TopicInfo --> TimeDatabase : use

TopicDatabase --|> DatabaseProvider
TimeDatabase --|> DatabaseProvider
Topic --|> DatabaseItem
Time --|> DatabaseItem

Topic *--> TopicInfo
Deck *--> Topic

TopicInfo *-- Time

@enduml