@startuml Conversation deck cards
package Controllers
{
    package "States "
    {
        class DatabaseFormState<T extends DatabaseItem>
        {
            +key:GlobalKey<FormState>
            +formBody:List<Widget>
            +itme:T?
            +onComplete():void
            +{abstract}itemInit():void
            +{abstract}onSaved():void
            +{abstract}createFormBody():void
        }
        class DeckFormState
        class TopicFormState

    }
    class DatabaseForm<T extends DatabaseItem>
    {
        +state:DatabaseFormState
        +onComplete():void
    }
    class DeckForm
    class TopicForm
}

package Database
{
    package Models
    {
        abstract DatabaseItem
        {
            -_id:int
            +name:String
            +detail:String
            +<<property>>id:int{get only}
            +parse(data:Map<String, dynamic>):DatabaseItem
            +toMap():Map<String, dyanmic>
            +{abstract}init(obj:Map<String,dynamic>):Future
        }
    }
    package Utils
    {
        class Builder
        {
            -_constructor:Map<Type,dynamic Function(Map<String,dynamic>)>
            -{static}_instance:Builder
            -_constructor:Builder()
            +make<T>(arguments:Map<String,dynamic>):T?
        }
    }
    abstract DatabaseProvider<T extends DatabaseItem>
    {
        +version:int
        +table:String
        -_database:Database?
        +<<property>>database:Future<Database?>{get only}
        -<<async>>_init():Future<Database>
        +<<async>>all():Future<List<T>>
        +<<async>>reset():Future
        +{abstract}<<async>>onCreate(db:Database,version:int):Future
        +<<async>>insert(data:T):Future
        +<<async>>update(data:T):Future
        +<<async>>deleteAt(id:int):Future
        +<<async>>getAt(id:int):Future<T?>
        +<<async>>getAts(ids:Iterable<int>):Future<List<T>>
    }
    class DeckDatabase
    {
        -_instance:DeckDatabase
        -_constructor():DeckDatabase
    }
    class TopicDatabase
    {
        -_instance:TopicDatabase
        -_constructor():TopicDatabase
    }
}

package "Models "
{
    class DatabaseListTile<T extends DatabaseItem>
    {
        +data:T
        +onTap:void Function(T)
        +onLongPress:void Function(T)
        +onDismissed:void Function(T)
    }
    class Deck
    {
        -_topics:List<Topic>
        +{static}separator:String
        +<<property>>topics:Iterable<Topic>
        +draw(count:int):List<Topic>
        +shuffle():void
        +remove(topic:Topic):void
    }
    class FooterItem
    {
        +route:Widget
    }
    class Topic
    {
        +when:DateTime
        +where:String
        +who:String
        +whatUp:String
        -_useCount:int
        +<<property>>useCount:int{get only}
        +use():void
    }
}
package Pages
{
    package States
    {
        abstract TopicListState
        {
            +appBar:AppBar
            +future:Future<List<Topic>>
            +{abstract}onFloatingButtonPressed():void
            +{abstract}onListTileTap(topic:Topic):void
            +{abstract}onListTileLongPress(topic:Topic):void
            +{abstract}onDismissed(topic:Topic):void
            +{abstract}update():void
        }
        class TopicAll
        class DecksTopic
        {
            +deck:Deck
        }
    }
    class DeckMake
    class Home
    class Root
    class TopicList
    class TopicMake
    class Setting
}
package Views
{
    class DatabaseListView
    {
        +future:Future<List<T>>
        +onTap:void Function(T)
        +onLongPress:void Function(T)
        +onDismissed:void Function(T)
    }
    class DatePickerFormField
    {
        +currentDate:DateTime
        +onSaved:void Function(DateTime?)
    }
    class Footer
    {
        +items:List<FooterItem>
        +onTap:Function(int)
    }
}

DatabaseProvider --> DatabaseItem
DatabaseProvider --> Builder : use
Deck --> TopicDatabase : use
Root --> Footer
Home --> DatabaseListView
TopicList --> DatabaseListView
TopicMake --> TopicForm
TopicForm --> TopicDatabase : insert or update
Builder -left-> DatabaseItem : create
TopicList --> TopicListState : use
DatabaseForm --> DatabaseFormState : use
TopicForm --> TopicFormState : use
DeckForm --> DeckFormState : use
Setting --> DeckDatabase : reset
Setting --> TopicDatabase : reset
DeckMake --> DeckForm

DeckDatabase --|> DatabaseProvider
TopicDatabase --|> DatabaseProvider
Deck --|> DatabaseItem
Topic --|> DatabaseItem
TopicAll --|> TopicListState
DecksTopic --|> TopicListState
TopicForm --|> DatabaseForm
TopicFormState --|> DatabaseFormState
DeckForm --|> DatabaseForm
DeckFormState --|> DatabaseFormState

DeckDatabase *-up- Deck
TopicDatabase *-up- Topic
Footer "1" *-- "*" FooterItem
DatabaseListTile "1" *-- "1" DatabaseItem
TopicFormState *-- DatePickerFormField

Deck "1" o-right- "*" Topic
DatabaseListView "1" o-- "*" DatabaseListTile

@enduml